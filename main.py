import requests
import logging
import time
import random
import os
from collections import deque
from pathlib import Path
from dotenv import load_dotenv
import telebot
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent / '.env'
load_dotenv(dotenv_path=env_path)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LEAKCHECK_API_KEY = os.getenv("LEAKCHECK_API_KEY")
API_URL = "https://leakcheck.io/api/public"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

request_timestamps = deque(maxlen=1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
LOCAL_DICTIONARIES = [
    "rockyou2021.txt",
    "seclists.txt",
    "probable.txt",
    "haklistgen.txt"
]

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
def generate_password(length=12):
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
    return ''.join(random.choice(chars) for _ in range(length))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ LeakCheck API
def make_api_request(query: str) -> dict:
    current_time = time.time()
    if request_timestamps:
        elapsed = current_time - request_timestamps[0]
        if elapsed < 1.0:
            time.sleep(1.0 - elapsed)
    request_timestamps.append(time.time())

    params = {
        "key": LEAKCHECK_API_KEY,
        "check": query,
        "type": "email" if "@" in query else "login"
    }
    try:
        response = requests.get(API_URL, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"API request failed: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö
def search_in_local_files(query):
    results = []
    query_lower = query.lower()
    for filename in LOCAL_DICTIONARIES:
        try:
            with open(filename, 'r', encoding='utf-8', errors='ignore') as f:
                for i, line in enumerate(f):
                    if query_lower in line.lower():
                        results.append((filename, i + 1, line.strip()))
                        break
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {filename}: {e}")
            continue
    return results

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def format_local_results(matches):
    if not matches:
        return "\n‚ùå –í –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–∞—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    response = ["\nüìÇ –ù–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–∞—Ö:"]
    for file, line_num, line in matches:
        response.append(f"\nüìÑ {file} (—Å—Ç—Ä–æ–∫–∞ {line_num}):\nüî∏ {line}")
    return "\n".join(response)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ LeakCheck
def format_leak_results(data: dict) -> str:
    if not data:
        return "\n‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç LeakCheck API"
    if not data.get("success", False):
        return f"\n‚ùå –û—à–∏–±–∫–∞ API: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    found_count = data.get("found", 0)
    if found_count == 0:
        return "\n‚úÖ –í LeakCheck —É—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    sources = data.get("sources", [])
    results = []
    for source in sources:
        name = source.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        date = source.get("date", "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        lines = source.get("lines", "N/A")
        results.append(
            f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {name}\nüìÖ –î–∞—Ç–∞: {date}\nüìä –ó–∞–ø–∏—Å–µ–π: {lines}"
        )
    return f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –≤ LeakCheck: {found_count} —É—Ç–µ—á–µ–∫\n\n" + "\n\n".join(results)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def get_inline_main_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üîç –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="new_check"),
        types.InlineKeyboardButton("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="gen_pass"),
        types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", switch_inline_query="LeakGuard ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫–∏!")
    )
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å: \n\nüîπ –ò–º—è\nüîπ –ü–æ—á—Ç—É\nüîπ –ù–∏–∫–Ω–µ–π–º\nüîπ –ü–∞—Ä–æ–ª—å\nüîπ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        reply_markup=get_inline_main_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data == "new_check")
def callback_new_check(call):
    bot.send_message(
        call.message.chat.id,
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å: \n\nüîπ –ò–º—è\nüîπ –ü–æ—á—Ç—É\nüîπ –ù–∏–∫–Ω–µ–π–º\nüîπ –ü–∞—Ä–æ–ª—å\nüîπ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        reply_markup=get_inline_main_menu()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "gen_pass")
def callback_generate_password(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for length in [8, 12, 16, 20]:
        markup.add(types.InlineKeyboardButton(f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å {length} —Å–∏–º–≤–æ–ª–æ–≤", callback_data=f"gen_pass_{length}"))
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("gen_pass_"))
def callback_generate_custom_length_password(call):
    length_str = call.data.split("_")[-1]
    try:
        length = int(length_str)
        password = generate_password(length)
        bot.send_message(
            call.message.chat.id,
            f"üîê –í–æ—Ç –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å ({length} —Å–∏–º–≤–æ–ª–æ–≤): `{password}`",
            parse_mode="Markdown",
            reply_markup=get_inline_main_menu()
        )
    except ValueError:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.")
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def handle_query(message):
    query = message.text.strip()
    if not query or len(query) < 3:
        bot.reply_to(message, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    status_msg = bot.send_message(message.chat.id, "üîé –ü—Ä–æ–≤–µ—Ä—è—é, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")

    try:
        start_time = time.time()

        local_matches = search_in_local_files(query)
        response = format_local_results(local_matches)

        api_response = make_api_request(query)
        response += format_leak_results(api_response)

        if not local_matches and (not api_response or not api_response.get("found")):
            response = "‚úÖ –£—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—Å—ë —á–∏—Å—Ç–æ!"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
        if ' ' not in query and len(query) >= 6 and query.isascii():
            freq_count = sum(1 for _, _, line in local_matches if query.lower() in line.lower())
            if freq_count >= 5:
                response += f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å./nüîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{generate_password()}`"
            elif freq_count > 0:
                response += "‚ÑπÔ∏è –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –ø–æ–ø—É–ª—è—Ä–µ–Ω. –õ—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å."
            else:
                response += "‚úÖ –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ."

        elapsed = time.time() - start_time
        if elapsed > 15:
            response = "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

    bot.send_message(chat_id=message.chat.id, text=response, reply_markup=get_inline_main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
